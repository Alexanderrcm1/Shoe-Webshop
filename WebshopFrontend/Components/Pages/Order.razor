@page "/orders/{id:int}"
@using System.Text.Json
@using WebshopFrontend.Components.MyComponents
@using WebshopLibrary;
@using WebshopLibrary.DTOs
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Order</PageTitle>

<div class="order-page">
	<div class="currency-container">
		<CurrencyComponent CurrencyChanged="Exchange"/>
	</div>
	@if (order != null)
	{
		<main class="order-main">
@* 			<div class="img-container">
				<img src="Sneakz.png">
			</div> *@
			<div class="header-container">
				<h1>Thanks for your order, @order.FirstName!</h1>
@* 				<h2>Order Id: @order.Id</h2> *@
			</div>
			<div class="items-container">
				<table>
					<tr>
						<th id="product">Product</th>
						<th>Quantity</th>
						<th>Amount</th>
					</tr>
					@foreach (var group in _shoes.GroupBy(s => s.ModelId))
					{
						var shoe = group.First();
						var quantity = group.Count();
						var price = shoe.Price * quantity;

						if (shoe.OnSale)
						{
							var finalPrice = Math.Round(price * 0.7m * _rate, 2);
							<tr>
								<td>
									<div class="shoe-box">
										<div class="box-img-container">
											<img src="@shoe.ImgUrl"/>
										</div>
										<div class="box-info-container">
											<p>@shoe.Brand @shoe.Name</p>
											<p>Size: @shoe.Size</p>
											<p>Color: @shoe.Color</p>
										</div>
									</div>
								</td>
								<td>@quantity</td>
								<td class="sale-price">@finalPrice @_currency</td>
							</tr>
						}
						else
						{
							var finalPrice = Math.Round(price * _rate, 2);
							<tr>
								<td>
									<div class="shoe-box">
										<div class="box-img-container">
											<img src="@shoe.ImgUrl"/>
										</div>
										<div class="box-info-container">
											<p>@shoe.Brand @shoe.Name</p>
											<p>Size: @shoe.Size</p>
											<p>Color: @shoe.Color</p>
										</div>
									</div>
								</td>
								<td>@quantity</td>
								<td>@finalPrice @_currency</td>
							</tr>
						}
					}
					<tr>
						<td></td>
						<td>Total Amount:</td>
						<td>@_total @_currency</td>
					</tr>

				</table>
			</div>
			<div class="delivery-container">
				<h2>Delivery Address:</h2>
				<p>@order.FirstName @order.LastName</p>
				<p>@order.Street</p>
				<p>@order.Postcode @order.City @order.Country</p>
				<p>Phone: @order.Phone</p>
				<p>Email: @order.Email</p>
			</div>
		</main>
	}
</div>

@code
{
	[Parameter] public int Id { get; set; }

	private OrderDTO? order;
	private List<ShoeDTO> _shoes = new();
	private decimal _total = 0;

	private string? _currency;
	private decimal _rate = 1m;

	private decimal GetTotal(List<ShoeDTO> cart)
	{
		decimal total = 0;
		foreach (var s in cart)
		{
			if (s.OnSale)
			{
				total += Math.Round(s.Price * 0.7m * _rate, 2);
			}
			else
			{
				total += Math.Round(s.Price * _rate, 2);
			}
		}

		return total;
	}

	private async Task FetchOrder()
	{
		using var client = HttpClientFactory.CreateClient("MyApi");
		order = await client.GetFromJsonAsync<OrderDTO>($"/orders/{Id}");
	}

	private List<ShoeDTO> GetShoes()
	{
		string json = order.CartItems;
		return JsonSerializer.Deserialize<List<ShoeDTO>>(json);
	}

	protected override async Task OnInitializedAsync()
	{
		await FetchOrder();
		_shoes = GetShoes();
		_total = GetTotal(_shoes);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;
		_currency = await LocalStorage.GetItemAsync<string>("currency") ?? "SEK";
		await Exchange(_currency);
		StateHasChanged();
	}

	public async Task Exchange(string currency)
	{
		using var client = HttpClientFactory.CreateClient("MyApi");
		var response = await client.GetFromJsonAsync<ExchangeRateDTO>("/exchange");
		var rates = response.ConversionRates;

		if (rates != null)
		{
			_rate = rates[currency];
			_currency = currency;
			_total = GetTotal(_shoes);
			StateHasChanged();
		}
	}

}

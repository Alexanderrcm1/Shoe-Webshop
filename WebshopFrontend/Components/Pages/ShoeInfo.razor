@page "/ShoeInfo/{id:int}"
@using Microsoft.AspNetCore.Components.Authorization
@using WebshopFrontend.Components.MyComponents
@using WebshopLibrary
@using WebshopLibrary.DTOs
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthStateProvider
@inject CartService CartService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<div class="info-container">
	<div class="currency-container">
		<CurrencyComponent CurrencyChanged="Exchange"/>
	</div>
	@if (_shoe != null)
	{
		var price = Math.Round(_shoe.Price * _rate, 2);
		var salePrice = Math.Round(price * 0.7m * _rate, 2);
		if (_shoe.OnSale)
		{
			<div class="img-div">
				<img src=@_shoe.ImgUrl>
			</div>
			<div class="text-div">
				<h1>@_shoe.Brand</h1>
				<h2>@_shoe.Name</h2>
				<p>In Store: @_shoe.Quantity</p>
				<p>Color: @_shoe.Color</p>
				<p>Size: @_shoe.Size</p>
				<p class="old-price">@price @_currency</p>
				<h2 class="sale-price">@salePrice @_currency</h2>
				@if (_shoe.Quantity > 0)
				{
					<button class="add-shoe-btn" @onclick="() => AddShoeToCart(_shoe)">Push to cart</button>
				}
				else
				{
					<button class="sold-out-btn">Sold Out</button>
				}
			</div>
		}
		else
		{
			<div class="img-div">
				<img src=@_shoe.ImgUrl>
			</div>
			<div class="text-div">
				<h1>@_shoe.Brand</h1>
				<h2>@_shoe.Name</h2>
				<p>In Store: @_shoe.Quantity</p>
				<p>Color: @_shoe.Color</p>
				<p>Size: @_shoe.Size</p>
				<p>@price @_currency</p>
				@if (_shoe.Quantity > 0)
				{
					<button class="add-shoe-btn" @onclick="() => AddShoeToCart(_shoe)">Push to cart</button>
				}
				else
				{
					<button class="sold-out-btn">Sold Out</button>
				}
			</div>
		}
	}
</div>

@code {
	[Parameter] public int Id { get; set; }

	private ShoeDTO? _shoe;
	private AuthenticationState? _authState;
	private bool _isLoggedIn;
	private string _user = "Guest";

	private string? _currency;
	private decimal _rate = 1m;

	private async Task FetchShoe()
	{
		using var client = HttpClientFactory.CreateClient("MyApi");
		_shoe = await client.GetFromJsonAsync<ShoeDTO>($"/shoes/{Id}");
	}

	protected override async Task OnInitializedAsync()
	{
		await FetchShoe();
		_isLoggedIn = await CheckRegisteredUser();
		if (_isLoggedIn)
		{
			_user = _authState?.User?.Identity?.Name ?? "Guest";
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;
		_currency = await LocalStorage.GetItemAsync<string>("currency") ?? "SEK";
		await Exchange(_currency);
		StateHasChanged();
	}

	private async Task AddShoeToCart(ShoeDTO shoe)
	{
		using var client = HttpClientFactory.CreateClient("MyApi");
		await CartService.AddShoeToCart(_user, shoe, client);
		await FetchShoe();
	}

	private async Task<bool> CheckRegisteredUser()
	{
		_authState = await AuthStateProvider.GetAuthenticationStateAsync();
		return _authState?.User?.Identity?.IsAuthenticated ?? false;
	}

	public async Task Exchange(string currency)
	{
		using var client = HttpClientFactory.CreateClient("MyApi");
		var response = await client.GetFromJsonAsync<ExchangeRateDTO>("/exchange");
		var rates = response?.ConversionRates;

		if (rates != null)
		{
			_rate = rates[currency];
			_currency = currency;
			StateHasChanged();
		}
	}

}
